@page "/cashoutflow"
@using Ing_ExpenseTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <h1 class="text-primary mb-4"><i class="bi bi-cash-coin"></i> Cash Outflows</h1>

    <!-- Success Message -->
    @if (IsSuccessMessageVisible)
    {
        <div class="alert alert-success shadow-sm d-flex align-items-center" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
            <i class="bi bi-check-circle-fill me-2"></i> @SuccessMessage
        </div>
    }

    <!-- Error Message -->
    @if (IsErrorMessageVisible)
    {
        <div class="alert alert-danger shadow-sm d-flex align-items-center" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @ErrorMessage
        </div>
    }

    <!-- Outflow Summary -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-danger"><i class="bi bi-arrow-down-circle"></i> Total Outflows</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(TotalOutflows)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-info"><i class="bi bi-bar-chart-line"></i> Highest Outflow</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(HighestOutflow)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-warning"><i class="bi bi-bar-chart"></i> Lowest Outflow</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(LowestOutflow)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-success"><i class="bi bi-wallet2"></i> Net Balance</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(MainBalance)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add New Outflow Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h2 class="card-title text-primary"><i class="bi bi-plus-circle"></i> Add New Cash Outflow</h2>
            <EditForm Model="newOutflow" OnValidSubmit="HandleCashOutflowSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="amount" class="form-label">Amount</label>
                    <InputNumber id="amount" @bind-Value="newOutflow.Debit" class="form-control" placeholder="e.g., 2000" />
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label">Date</label>
                    <InputDate id="date" @bind-Value="newOutflow.Date" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputText id="category" @bind-Value="newOutflow.Category" class="form-control" placeholder="e.g., Rent, Utilities" />
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <InputTextArea id="notes" @bind-Value="newOutflow.Description" class="form-control" placeholder="e.g., Paid for electricity bill" />
                </div>

                <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-plus-circle"></i> Add Outflow
                </button>
            </EditForm>
        </div>
    </div>

    <!-- Recent Outflows -->
    <div class="card shadow-sm">
        <div class="card-body">
            <h2 class="card-title text-info"><i class="bi bi-clock-history"></i> Recorded Cash Outflows</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Category</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (CashOutflows.Any())
                        {
                            @foreach (var outflow in CashOutflows.OrderByDescending(o => o.Date))
                            {
                                <tr>
                                    <td>@outflow.Date.ToString("MM/dd/yyyy")</td>
                                    <td>@FormatWithCurrency(outflow.Debit)</td>
                                    <td>@outflow.Category</td>
                                    <td>@outflow.Description</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">
                                    <i class="bi bi-info-circle"></i> No cash outflows recorded.
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> CashOutflows = new();
    private decimal TotalOutflows = 0;
    private decimal HighestOutflow = 0;
    private decimal LowestOutflow = 0;
    private Transaction newOutflow = new Transaction();
    private decimal MainBalance = 0;
    private DateTime CurrentDate = DateTime.Now;

    private string SuccessMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private bool IsSuccessMessageVisible = false;
    private bool IsErrorMessageVisible = false;
    private string SelectedCurrency = "USD"; // Default currency

    protected override void OnInitialized()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/"); // Redirect to login if no user is logged in
            return;
        }

        SelectedCurrency = currentUser.PreferredCurrency ?? "USD"; // Get user's preferred currency
        UserService.LoadNetBalance(); // Ensure the latest Net Balance is loaded
        RefreshOutflows();
    }

    private string FormatWithCurrency(decimal amount)
    {
        var currentUser = UserService.GetCurrentUser();
        string selectedCurrency = currentUser?.PreferredCurrency ?? "USD";
        return UserService.FormatWithCurrency(amount, selectedCurrency);
    }

    private void RefreshOutflows()
    {
        var data = UserService.LoadUsers();
        var currentUser = UserService.GetCurrentUser();

        // Load outflows
        CashOutflows = data.Transactions
            .Where(t => t.UserId == currentUser.Id && t.Debit > 0)
            .ToList();

        CalculateSummary(data, currentUser);
    }

    private async Task HandleCashOutflowSubmit()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/"); // Redirect to login if no user is logged in
            return;
        }

        // Validate Debit amount
        if (newOutflow.Debit <= 0 || string.IsNullOrWhiteSpace(newOutflow.Description))
        {
            ErrorMessage = "Outflow amount must be greater than zero.";
            ShowErrorMessage();
            return;
        }

        // Check for sufficient balance
        if (newOutflow.Debit > MainBalance)
        {
            ErrorMessage = "Insufficient balance for this outflow.";
            ShowErrorMessage();
            return;
        }

        // Load data and assign properties
        var data = UserService.LoadUsers();
        newOutflow.Id = data.Transactions.Any() ? data.Transactions.Max(t => t.Id) + 1 : 1;
        newOutflow.Date = DateTime.Now;
        newOutflow.UserId = currentUser.Id;

        // Add the outflow
        data.Transactions.Add(newOutflow);
        UserService.SaveUsers(data);

        // Update NetBalance
        UserService.UpdateNetBalanceAfterTransaction(0, newOutflow.Debit);

        // Refresh data
        RefreshOutflows();

        // Reset form
        newOutflow = new Transaction();

        // Show success message
        SuccessMessage = "Cash outflow successfully added!";
        ShowSuccessMessage();
    }

    private void CalculateSummary(AppData data, User currentUser)
    {
        TotalOutflows = CashOutflows.Any() ? CashOutflows.Sum(t => t.Debit) : 0;
        HighestOutflow = CashOutflows.Any() ? CashOutflows.Max(t => t.Debit) : 0;
        LowestOutflow = CashOutflows.Any() ? CashOutflows.Min(t => t.Debit) : 0;

        // Get the Net Balance directly from UserService
        MainBalance = UserService.NetBalance;
    }

    private async void ShowSuccessMessage()
    {
        IsSuccessMessageVisible = true;
        await Task.Delay(3000);
        IsSuccessMessageVisible = false;
    }

    private async void ShowErrorMessage()
    {
        IsErrorMessageVisible = true;
        await Task.Delay(3000);
        IsErrorMessageVisible = false;
    }
}
