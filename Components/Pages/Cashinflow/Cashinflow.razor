@page "/cashinflow"
@using Ing_ExpenseTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <h1 class="text-primary mb-4"><i class="bi bi-cash-stack"></i> Cash Inflows</h1>

    <!-- Success Message -->
    @if (IsSuccessMessageVisible)
    {
        <div class="alert alert-success shadow-sm d-flex align-items-center" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
            <i class="bi bi-check-circle-fill me-2"></i> @SuccessMessage
        </div>
    }

    <!-- Inflow Summary -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-success"><i class="bi bi-currency-dollar"></i> Total Inflows</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(TotalInflows)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-info"><i class="bi bi-arrow-up-circle"></i> Highest Inflow</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(HighestInflow)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-warning"><i class="bi bi-arrow-down-circle"></i> Lowest Inflow</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(LowestInflow)</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-primary"><i class="bi bi-wallet2"></i> Net Balance</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(NetBalance)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add New Cash Inflow -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h2 class="card-title text-primary"><i class="bi bi-plus-circle"></i> Add New Cash Inflow</h2>
            <EditForm Model="newTransaction" OnValidSubmit="HandleCashInflowSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="credit" class="form-label">Credit Amount</label>
                    <InputNumber id="credit" @bind-Value="newTransaction.Credit" class="form-control" placeholder="e.g., 5000" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" placeholder="e.g., Salary for March" />
                </div>

                <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-plus-circle"></i> Add Cash Inflow
                </button>
            </EditForm>
        </div>
    </div>

    <!-- Cash Inflows Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <h2 class="card-title text-info"><i class="bi bi-clock-history"></i> Recorded Cash Inflows</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <th>Transaction ID</th>
                            <th>Credit</th>
                            <th>Date</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (CashInflows.Any())
                        {
                            @foreach (var transaction in CashInflows.OrderByDescending(t => t.Date))
                            {
                                <tr>
                                    <td>@transaction.Id</td>
                                    <td>@FormatWithCurrency(transaction.Credit)</td>
                                    <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                                    <td>@transaction.Description</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">
                                    <i class="bi bi-info-circle"></i> No cash inflows recorded.
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> CashInflows = new();
    private decimal TotalInflows = 0;
    private decimal HighestInflow = 0;
    private decimal LowestInflow = 0;
    private decimal NetBalance = 0; // Added Net Balance
    private Transaction newTransaction = new Transaction();
    private string SuccessMessage = string.Empty;
    private bool IsSuccessMessageVisible = false;

    private string SelectedCurrency = "USD"; // Default currency

    protected override void OnInitialized()
    {
        var data = UserService.LoadUsers();
        var currentUser = UserService.GetCurrentUser();

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/"); // Redirect to login if no user is logged in
            return;
        }

        SelectedCurrency = currentUser.PreferredCurrency ?? "USD";

        // Load only cash inflows for the current user
        CashInflows = data.Transactions
            .Where(t => t.UserId == currentUser.Id && t.Credit > 0)
            .ToList();

        CalculateSummary();
    }

    private string FormatWithCurrency(decimal amount)
    {
        var currentUser = UserService.GetCurrentUser();
        string selectedCurrency = currentUser?.PreferredCurrency ?? "USD";
        return UserService.FormatWithCurrency(amount, selectedCurrency);
    }



    private async Task HandleCashInflowSubmit()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/"); // Redirect to login if no user is logged in
            return;
        }

        // Validate the transaction
        if (newTransaction.Credit <= 0 || string.IsNullOrWhiteSpace(newTransaction.Description))
        {
            return;
        }

        // Load data
        var data = UserService.LoadUsers();

        // Assign properties to the transaction
        newTransaction.Id = data.Transactions.Any() ? data.Transactions.Max(t => t.Id) + 1 : 1; // Incremental ID
        newTransaction.Date = DateTime.Now;
        newTransaction.UserId = currentUser.Id;

        // Add the transaction
        data.Transactions.Add(newTransaction);
        UserService.SaveUsers(data);

        // Update NetBalance
        UserService.UpdateNetBalanceAfterTransaction(newTransaction.Credit, 0);

        // Refresh the page data
        CashInflows = data.Transactions
            .Where(t => t.UserId == currentUser.Id && t.Credit > 0)
            .ToList();

        CalculateSummary();

        // Reset form
        newTransaction = new Transaction();

        // Show success message
        SuccessMessage = "Cash inflow successfully added!";
        IsSuccessMessageVisible = true;

        // Automatically hide the message after 3 seconds
        await Task.Delay(3000);
        IsSuccessMessageVisible = false;
    }


    private void CalculateSummary()
    {
        if (CashInflows.Any())
        {
            TotalInflows = CashInflows.Sum(t => t.Credit);
            HighestInflow = CashInflows.Max(t => t.Credit);
            LowestInflow = CashInflows.Min(t => t.Credit);
        }
        else
        {
            TotalInflows = 0;
            HighestInflow = 0;
            LowestInflow = 0;
        }

        // Get the Net Balance directly from UserService
        NetBalance = UserService.NetBalance;
    }
}
