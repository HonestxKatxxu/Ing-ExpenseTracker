@page "/transactions"
@using Ing_ExpenseTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <h1 class="text-primary mb-4">Transactions</h1>

    <!-- Filter and Sort Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h2 class="card-title text-info">Filter and Sort Transactions</h2>
            <div class="row g-3">
                <div class="col-md-3">
                    <input type="text" @bind="SearchQuery" placeholder="Search transactions..." class="form-control" />
                </div>
                <div class="col-md-3">
                    <select @bind="SelectedType" class="form-select">
                        <option value="">All Types</option>
                        <option value="Inflow">Inflow</option>
                        <option value="Outflow">Outflow</option>
                        <option value="Debt">Debt</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <input type="date" @bind="StartDate" class="form-control" />
                </div>
                <div class="col-md-2">
                    <input type="date" @bind="EndDate" class="form-control" />
                </div>
                <div class="col-md-2">
                    <select @bind="SortBy" class="form-select">
                        <option value="DateAsc">Sort by Date (Asc)</option>
                        <option value="DateDesc">Sort by Date (Desc)</option>
                    </select>
                </div>
            </div>
            <div class="mt-3">
                <button class="btn btn-primary w-100" @onclick="FilterTransactions">Filter Transactions</button>
            </div>
        </div>
    </div>

    <!-- Transaction Summary Section -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-success">Total Transactions</h4>
                    <p class="display-6 fw-bold">@TotalTransactions</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-info">Net Total</h4>
                    <p class="display-6 fw-bold">@FormatWithCurrency(NetTotal)</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-warning">Highest Transactions</h4>
                    <ul class="list-unstyled fw-bold">
                        <li><strong>Inflow:</strong> @FormatWithCurrency(HighestInflow)</li>
                        <li><strong>Outflow:</strong> @FormatWithCurrency(HighestOutflow)</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Transaction Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <h2 class="card-title text-info">All Transactions</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <th>Date</th>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Tags</th>
                            <th>Notes</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (FilteredTransactions.Any())
                        {
                            @foreach (var transaction in FilteredTransactions)
                            {
                                <tr>
                                    <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                                    <td>@transaction.Description</td>
                                    <td>@transaction.Type</td>
                                    <td>
                                        @FormatWithCurrency(transaction.Debit > 0 ? transaction.Debit : transaction.Credit)
                                    </td>
                                    <td>@transaction.Tags</td>
                                    <td>@transaction.Notes</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => DownloadReceipt(transaction)">
                                            Download Receipt
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No transactions available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- Popup Notification -->
            @if (IsNotificationVisible)
            {
                <div class="alert alert-success text-center mt-3" role="alert">
                    Receipt downloaded successfully!
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Transaction> AllTransactions = new();
    private List<Transaction> FilteredTransactions = new();
    private string SearchQuery = "";
    private string SelectedType = "";
    private DateTime? StartDate = null;
    private DateTime? EndDate = null;
    private string SortBy = "DateDesc";

    private int TotalTransactions = 0;
    private string SelectedCurrency = "USD"; // Default currency

    private decimal NetTotal => UserService.NetBalance; // Use global Net Balance
    private decimal HighestInflow = 0;
    private decimal LowestInflow = 0;
    private decimal HighestOutflow = 0;
    private decimal LowestOutflow = 0;
    private decimal HighestDebt = 0;
    private decimal LowestDebt = 0;

    private bool IsNotificationVisible = false;

    protected override void OnInitialized()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/"); // Redirect to login if no user is logged in
            return;
        }

        SelectedCurrency = currentUser.PreferredCurrency ?? "USD"; // Fetch user's preferred currency
        RefreshTransactions();
    }

    private void RefreshTransactions()
    {
        var data = UserService.LoadUsers();
        var currentUser = UserService.GetCurrentUser();

        // Load all transactions for the current user
        AllTransactions = data.Transactions
            .Where(t => t.UserId == currentUser.Id)
            .ToList();

        AllTransactions.ForEach(t =>
        {
            t.Tags = t.Tags ?? "N/A";
            t.Notes = t.Notes ?? "No Notes Available";
        });

        CalculateSummary();
        FilteredTransactions = AllTransactions.ToList();
    }

    private string FormatWithCurrency(decimal amount)
    {
        return UserService.FormatWithCurrency(amount, SelectedCurrency);
    }

    private void CalculateSummary()
    {
        TotalTransactions = AllTransactions.Count;

        HighestInflow = AllTransactions.Where(t => t.Credit > 0).DefaultIfEmpty(new Transaction()).Max(t => t.Credit);
        LowestInflow = AllTransactions.Where(t => t.Credit > 0).DefaultIfEmpty(new Transaction { Credit = decimal.MaxValue }).Min(t => t.Credit);

        HighestOutflow = AllTransactions.Where(t => t.Debit > 0).DefaultIfEmpty(new Transaction()).Max(t => t.Debit);
        LowestOutflow = AllTransactions.Where(t => t.Debit > 0).DefaultIfEmpty(new Transaction { Debit = decimal.MaxValue }).Min(t => t.Debit);

        HighestDebt = AllTransactions.Where(t => t.Type == "Debt").DefaultIfEmpty(new Transaction()).Max(t => t.Debit);
        LowestDebt = AllTransactions.Where(t => t.Type == "Debt").DefaultIfEmpty(new Transaction { Debit = decimal.MaxValue }).Min(t => t.Debit);
    }

    private void FilterTransactions()
    {
        FilteredTransactions = AllTransactions;

        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Description?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();
        }

        if (!string.IsNullOrWhiteSpace(SelectedType))
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Type?.Equals(SelectedType, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();
        }

        if (StartDate.HasValue && EndDate.HasValue)
        {
            FilteredTransactions = FilteredTransactions
                .Where(t => t.Date >= StartDate && t.Date <= EndDate)
                .ToList();
        }

        FilteredTransactions = SortBy switch
        {
            "DateAsc" => FilteredTransactions.OrderBy(t => t.Date).ToList(),
            "DateDesc" => FilteredTransactions.OrderByDescending(t => t.Date).ToList(),
            _ => FilteredTransactions
        };
    }

    private async Task DownloadReceipt(Transaction transaction)
    {
        transaction.Type = transaction.Credit > 0 ? "Inflow" : transaction.Debit > 0 ? "Outflow" : "Debt";

        UserService.GenerateReceipt(transaction);

        IsNotificationVisible = true;
        await Task.Delay(3000);
        IsNotificationVisible = false;

        StateHasChanged();
    }
}
